// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODÈLE UTILISATEUR (INCHANGÉ) ---
model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             UserRole       @default(TECHNICIAN)
  onlineStatus     String         @default("OFFLINE")
  lastSeen         DateTime?
  pushSubscription Json?
  accounts         Account[]
  sessions         Session[]
  leads            Lead[]
  missions         Mission[]      @relation("AssignedTo")
  teamMember       TeamMember?
  activities       Activity[]
  messages         Message[]
  conversations    Conversation[] @relation("ConversationParticipants")
  expenses         Expense[]
  fieldReports     FieldReport[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("users")
}

model FieldReport {
  id                     String   @id @default(cuid())
  missionId              String   @unique
  mission                Mission  @relation(fields: [missionId], references: [id])
  submittedById          String
  submittedBy            User     @relation(fields: [submittedById], references: [id])
  submissionDate         DateTime @default(now())
  generalObservations    String?  @db.Text
  clientFeedback         String?  @db.Text
  issuesEncountered      String?  @db.Text
  materialsUsed          Json?
  hoursWorked            Decimal  @db.Decimal(5, 2)
  beforePhotos           String[]
  afterPhotos            String[]
  clientSignatureUrl     String?
  teamLeadSignatureUrl   String?
  additionalNotes        String?  @db.Text
}

// --- MODÈLES NEXT-AUTH (INCHANGÉS) ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- MODÈLE LEAD (ENTIÈREMENT MIS À JOUR) ---
model Lead {
  id String @id @default(cuid())

  // 1. Informations Générales
  firstName   String
  lastName    String
  phone       String
  email       String?
  address     String?
  gpsLocation String?
  status      LeadStatus @default(NEW)
  score       Int?       @default(0)

  // 2. Détails Professionnels
  leadType        LeadType @default(PARTICULIER)
  company         String?
  iceNumber       String?
  activitySector  String?
  contactPosition String?
  department      String?

  // 3. Détails de la Demande
  propertyType     PropertyType?
  estimatedSurface Int?
  accessibility    AccessibilityLevel?   @default(EASY)
  materials        Json? // Stockera les sélections de matériaux
  urgencyLevel     UrgencyLevel?
  budgetRange      String?
  frequency        Frequency?            @default(PONCTUEL)
  contractType     ContractType?         @default(INTERVENTION_UNIQUE)

  // 4. Produits & Équipements
  needsProducts  Boolean? @default(false)
  needsEquipment Boolean? @default(false)
  providedBy     ProviderType?           @default(ENARVA)

  // 5. Origine du Lead
  channel         LeadCanal
  source          String? // Source précise
  hasReferrer     Boolean?     @default(false)
  referrerContact String?
  enarvaRole      EnarvaRole?  @default(PRESTATAIRE_PRINCIPAL)

  // 6. Suivi et Planification (Champs existants)
  originalMessage String
  assignedToId    String?
  assignedTo      User?      @relation(fields: [assignedToId], references: [id])

  // Relations
  quotes       Quote[]
  missions     Mission[]
  activities   Activity[]
  subscription Subscription?
  expenses     Expense[]
  invoices     Invoice[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("leads")
}

// --- MODÈLE DEVIS (MIS À JOUR MAJEURE POUR SERVICES ET PRODUITS) ---
model Quote {
  id          String      @id @default(cuid())
  quoteNumber String      @unique
  status      QuoteStatus @default(DRAFT)

  // NOUVEAU: Type de devis - Service ou Produit
  businessType QuoteBusinessType @default(SERVICE) // SERVICE ou PRODUCT

  // Champs pour devis détaillés et éditables
  lineItems  Json // [{"id": 1, "type": "base", "description": "Forfait de base...", "detail": "170m² x 14 DH/m²", "amount": 2380, "editable": true}, {...}]
  subTotalHT Decimal     @default(0)
  vatAmount  Decimal     @default(0)
  totalTTC   Decimal     @default(0)
  finalPrice Decimal // Le montant final arrondi présenté au client

  // Relations
  leadId String
  lead   Lead   @relation(fields: [leadId], references: [id])
  missions Mission[]

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  // SERVICES: Champs pour devis de services (nettoyage, etc.)
  type         QuoteType?    // EXPRESS, STANDARD, PREMIUM
  propertyType PropertyType?
  surface      Int?
  levels       Int?         @default(1)

  // PRODUCTS: Nouveaux champs pour devis de produits
  productCategory ProductQuoteCategory? // FURNITURE, EQUIPMENT, CONSUMABLES, etc.
  productDetails  Json? // Détails spécifiques des produits: {"items": [{"name": "Table", "qty": 2, "unitPrice": 500}], "delivery": {...}}
  deliveryType    DeliveryType? // PICKUP, STANDARD_DELIVERY, EXPRESS_DELIVERY
  deliveryAddress String? // Adresse de livraison si différente
  deliveryNotes   String? // Notes spéciales pour la livraison

  validatedAt DateTime?

  @@map("quotes")
}

model Mission {
  id                   String         @id @default(cuid())
  missionNumber        String         @unique
  status               MissionStatus  @default(SCHEDULED)
  priority             Priority       @default(NORMAL)
  type                 MissionType    @default(SERVICE)
  technicalVisitReport Json?
  scheduledDate        DateTime
  estimatedDuration    Int
  actualStartTime      DateTime?
  actualEndTime        DateTime?
  address              String
  coordinates          String?
  accessNotes          String?
  teamLeaderId         String?
  teamLeader           User?          @relation("AssignedTo", fields: [teamLeaderId], references: [id])
  teamMembers          TeamMember[]   @relation("MissionToTeamMember")
  leadId               String
  lead                 Lead           @relation(fields: [leadId], references: [id])
  quoteId              String?
  quote                Quote?         @relation(fields: [quoteId], references: [id])
  tasks                Task[]
  qualityChecks        QualityCheck[]
  inventoryUsed        InventoryUsage[]
  expenses             Expense[]
  clientValidated      Boolean        @default(false)
  clientFeedback       String?
  clientRating         Int?
  invoiceGenerated     Boolean         @default(false)
  invoiceId            String?         @unique
  invoice              Invoice?
  conversation         Conversation?
  fieldReport          FieldReport?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  adminValidated     Boolean?
  adminValidatedBy   String?
  adminValidatedAt   DateTime?
  adminNotes         String?
  qualityScore       Int?
  issuesFound        String?
  correctionRequired Boolean?

  @@map("missions")
}

model TeamMember {
  id           String           @id @default(cuid())
  userId       String           @unique
  user         User             @relation(fields: [userId], references: [id])
  specialties  TeamSpecialty[]
  experience   ExperienceLevel
  availability TeamAvailability @default(AVAILABLE)
  missions     Mission[]        @relation("MissionToTeamMember")
  tasks        Task[]
  hourlyRate   Decimal?
  joinedAt     DateTime         @default(now())
  isActive     Boolean          @default(true)

  @@map("team_members")
}

model Task {
  id            String       @id @default(cuid())
  title         String
  description   String?
  category      TaskCategory
  type          TaskType
  status        TaskStatus   @default(ASSIGNED)
  missionId     String
  mission       Mission      @relation(fields: [missionId], references: [id])
  assignedToId  String?
  assignedTo    TeamMember?  @relation(fields: [assignedToId], references: [id])
  estimatedTime Int? // en minutes
  actualTime    Int? // en minutes
  notes         String?
  completedAt   DateTime?
  validatedAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("tasks")
}

model TaskTemplate {
  id          String       @id @default(cuid())
  name        String
  description String?
  tasks       Json // Array of task objects
  category    TaskCategory
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("task_templates")
}

model Conversation {
  id           String    @id @default(cuid())
  missionId    String    @unique
  mission      Mission   @relation(fields: [missionId], references: [id])
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  isRead         Boolean      @default(false)
  attachments    String[]
  createdAt      DateTime     @default(now())

  @@map("messages")
}

model QualityCheck {
  id          String             @id @default(cuid())
  missionId   String
  mission     Mission            @relation(fields: [missionId], references: [id])
  type        QualityCheckType
  status      QualityStatus      @default(PENDING)
  checkedBy   String?
  checkedAt   DateTime?
  notes       String?
  photos      String[]
  issues      Json? // Array of issues found
  validatedAt DateTime?

  @@map("quality_checks")
}

model Inventory {
  id           String           @id @default(cuid())
  name         String
  category     ProductCategory
  unit         String
  currentStock Decimal
  minimumStock Decimal
  unitPrice    Decimal
  supplier     String
  usages       InventoryUsage[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("inventory")
}

model InventoryUsage {
  id          String    @id @default(cuid())
  quantity    Decimal
  notes       String?
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  missionId   String
  mission     Mission   @relation(fields: [missionId], references: [id])
  usedAt      DateTime  @default(now())

  @@map("inventory_usage")
}

model Subscription {
  id               String             @id @default(cuid())
  type             SubscriptionType
  status           SubscriptionStatus @default(ACTIVE)
  monthlyPrice     Decimal
  discount         Decimal            @default(0)
  nextBilling      DateTime
  includedServices Int
  usedServices     Int                @default(0)
  leadId           String             @unique
  lead             Lead               @relation(fields: [leadId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("subscriptions")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  title       String
  description String
  metadata    Json?
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  leadId      String?
  lead        Lead?        @relation(fields: [leadId], references: [id])
  createdAt   DateTime     @default(now())

  @@map("activities")
}

// --- NEW SYSTEM LOGGING MODEL ---
model SystemLog {
  id        String    @id @default(cuid())
  type      LogType
  status    LogStatus
  message   String
  metadata  Json?
  createdAt DateTime  @default(now())

  @@map("system_logs")
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  amount          Decimal       @db.Decimal(10, 2)
  status          InvoiceStatus @default(DRAFT)
  issueDate       DateTime      @default(now())
  dueDate         DateTime
  missionId       String        @unique
  mission         Mission       @relation(fields: [missionId], references: [id])
  leadId          String
  lead            Lead          @relation(fields: [leadId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  description     String?
}

model Expense {
  id              String          @id @default(cuid())
  date            DateTime
  amount          Decimal
  category        ExpenseCategory
  subCategory     String
  paymentMethod   PaymentMethod
  vendor          String?
  description     String?
  proofUrl        String?
  rentalStartDate DateTime?
  rentalEndDate   DateTime?
  missionId       String?
  mission         Mission?        @relation(fields: [missionId], references: [id])
  leadId          String?
  lead            Lead?           @relation(fields: [leadId], references: [id])
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("expenses")
}

// --- ENUMS ---
enum LogType {
  BACKUP
  ERROR
  INFO
  SECURITY
}

enum LogStatus {
  SUCCESS
  FAILED
  IN_PROGRESS
}

enum LeadCanal {
  WHATSAPP
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  GOOGLE_MAPS
  GOOGLE_SEARCH
  SITE_WEB
  FORMULAIRE_SITE
  MARKETPLACE
  YOUTUBE
  EMAIL
  APPORTEUR_AFFAIRES
  COMMERCIAL_TERRAIN
  SALON_PROFESSIONNEL
  PARTENARIAT
  RECOMMANDATION_CLIENT
  VISITE_BUREAU
  EMPLOYE_ENARVA
  APPEL_TELEPHONIQUE
  SMS
  NUMERO_SUR_PUB
  AFFICHE
  FLYER
  ENSEIGNE
  VOITURE_SIGLEE
  RADIO
  ANNONCE_PRESSE
  TELE
  MANUEL
  SOURCING_INTERNE
  PORTE_A_PORTE
  CHANTIER_EN_COURS
}

enum Frequency {
  PONCTUEL
  HEBDOMADAIRE
  MENSUEL
  BIMENSUEL
  TRIMESTRIEL
  QUARTANNE
  SEMESTRIEL
  ANNUEL
  CONTRAT_CADRE
  RECURRING // Ajouté pour les services récurrents
  AUTRE // Pour les fréquences non standard
}

enum ContractType {
  INTERVENTION_UNIQUE
  MAINTENANCE
  ABONNEMENT
  CONTRAT_CADRE
  RECURRING // Ajouté pour les services récurrents
  AUTRE // Pour les types de contrat non standard
}

enum MissionType {
  SERVICE
  TECHNICAL_VISIT
  DELIVERY
  INTERNAL
  RECURRING // Ajouté pour les services récurrents
}

enum ProviderType {
  ENARVA
  CLIENT
  MIXTE
}

enum EnarvaRole {
  PRESTATAIRE_PRINCIPAL
  SOUS_TRAITANT
  CO_TRAITANT
  AUTRE
}

enum ExpenseCategory {
  OPERATIONS
  REVENTE_NEGOCE
  RESSOURCES_HUMAINES
  ADMINISTRATIF_FINANCIER
  MARKETING_COMMERCIAL
  LOGISTIQUE_MOBILITE
  INFRASTRUCTURES_LOCAUX
  LOCATIONS
  EXCEPTIONNELLES_DIVERSES
}

enum PaymentMethod {
  CASH
  VIREMENT
  CARTE
  CHEQUE
  MOBILE
  AUTRE
}

enum LeadType {
  PARTICULIER
  PROFESSIONNEL
  PUBLIC
  NGO
  SYNDIC
  OTHER
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum UserRole {
  ADMIN
  MANAGER
  AGENT
  TEAM_LEADER
  TECHNICIAN
}

enum LeadStatus {
  // PHASE 1: Acquisition & Qualification
  NEW
  TO_QUALIFY
  WAITING_INFO
  QUALIFIED

  // PHASE 2: Pré-vente / Devis
  VISIT_PLANNED
  ON_VISIT
  VISIT_DONE
  QUOTE_SENT
  QUOTE_ACCEPTED
  QUOTE_REFUSED

  // PHASE 3: Intervention & Livraison
  MISSION_SCHEDULED
  IN_PROGRESS
  COMPLETED
  INTERVENTION_PLANNED
  INTERVENTION_IN_PROGRESS
  INTERVENTION_DONE
  QUALITY_CONTROL
  CLIENT_TO_CONFIRM_END
  CLIENT_CONFIRMED
  DELIVERY_PLANNED
  DELIVERY_DONE
  SIGNED_DELIVERY_NOTE

  // PHASE 4: Paiement
  PENDING_PAYMENT
  PAID_OFFICIAL
  PAID_CASH
  REFUNDED
  PENDING_REFUND

  // PHASE 5: Suivi / SAV / Upsell
  FOLLOW_UP_SENT
  UPSELL_IN_PROGRESS
  UPSELL_CONVERTED
  REWORK_PLANNED
  REWORK_DONE
  UNDER_WARRANTY
  AFTER_SALES_SERVICE

  // PHASE 6: Problèmes / Anomalies
  CLIENT_ISSUE
  IN_DISPUTE
  CLIENT_PAUSED
  LEAD_LOST
  CANCELLED
  CANCELED_BY_CLIENT
  CANCELED_BY_ENARVA
  INTERNAL_REVIEW
  AWAITING_PARTS

  // PHASE 7: Contrats / Sous-traitance
  CONTRACT_SIGNED
  UNDER_CONTRACT
  SUBCONTRACTED
  OUTSOURCED
  WAITING_THIRD_PARTY

  // PHASE 8: Produits / Leads externes
  PRODUCT_ONLY
  PRODUCT_SUPPLIER
  DELIVERY_ONLY
  AFFILIATE_LEAD
  SUBCONTRACTOR_LEAD
}

enum PropertyType {
  APARTMENT_SMALL
  APARTMENT_MEDIUM
  APARTMENT_MULTI
  APARTMENT_LARGE
  VILLA_SMALL
  VILLA_MEDIUM
  VILLA_LARGE
  PENTHOUSE
  COMMERCIAL
  STORE
  HOTEL_STANDARD
  HOTEL_LUXURY
  OFFICE
  RESIDENCE_B2B
  BUILDING
  RESTAURANT
  WAREHOUSE
  OTHER
}

enum MaterialType {
  STANDARD
  MARBLE
  PARQUET
  LUXURY
  MIXED
}

enum AccessibilityLevel {
  EASY
  MEDIUM
  MODERATE
  DIFFICULT
  VERY_DIFFICULT
}

enum UrgencyLevel {
  LOW
  NORMAL
  URGENT
  HIGH_URGENT
  IMMEDIATE
}

enum QuoteType {
  EXPRESS
  STANDARD
  PREMIUM
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
}

// NOUVEAU: Enum pour distinguer Services vs Produits
enum QuoteBusinessType {
  SERVICE   // Devis pour services (nettoyage, maintenance, etc.)
  PRODUCT   // Devis pour produits (mobilier, équipements, etc.)
}

// NOUVEAU: Categories pour les devis produits
enum ProductQuoteCategory {
  FURNITURE        // Mobilier
  EQUIPMENT        // Équipements 
  CONSUMABLES      // Consommables
  ELECTRONICS      // Électronique
  DECORATION       // Décoration
  TEXTILES         // Textiles (rideaux, tapis, etc.)
  LIGHTING         // Éclairage
  STORAGE          // Rangement
  KITCHEN_ITEMS    // Articles de cuisine
  BATHROOM_ITEMS   // Articles salle de bain
  OFFICE_SUPPLIES  // Fournitures de bureau
  OTHER           // Autres
}

// NOUVEAU: Types de livraison pour les produits
enum DeliveryType {
  PICKUP             // Récupération en magasin/entrepôt
  STANDARD_DELIVERY  // Livraison standard (3-5 jours)
  EXPRESS_DELIVERY   // Livraison express (24-48h)
  SCHEDULED_DELIVERY // Livraison programmée
  WHITE_GLOVE       // Service livraison premium avec installation
}

enum MissionStatus {
  SCHEDULED
  IN_PROGRESS
  QUALITY_CHECK
  CLIENT_VALIDATION
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum TaskCategory {
  GENERAL
  EXTERIOR_FACADE
  WALLS_BASEBOARDS
  FLOORS
  STAIRS
  WINDOWS_JOINERY
  KITCHEN
  BATHROOM_SANITARY
  LIVING_SPACES
  LOGISTICS_ACCESS
}

enum TaskType {
  BATHROOM_CLEANING
  WINDOW_CLEANING
  FLOOR_CLEANING
  SURFACE_CLEANING
  DETAIL_FINISHING
  SETUP
  CLEANUP
}

enum TaskStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  VALIDATED
  REJECTED
}

enum TeamSpecialty {
  GENERAL_CLEANING
  WINDOW_SPECIALIST
  FLOOR_SPECIALIST
  LUXURY_SURFACES
  EQUIPMENT_HANDLING
  TEAM_MANAGEMENT
  QUALITY_CONTROL
  DETAIL_FINISHING
}

enum ExperienceLevel {
  JUNIOR
  INTERMEDIATE
  SENIOR
  EXPERT
}

enum TeamAvailability {
  AVAILABLE
  BUSY
  OFF_DUTY
  VACATION
}

enum QualityCheckType {
  TEAM_LEADER_CHECK
  FINAL_INSPECTION
  CLIENT_WALKTHROUGH
}

enum QualityStatus {
  PENDING
  PASSED
  FAILED
  NEEDS_CORRECTION
}

enum ProductCategory {
  CLEANING_PRODUCTS
  EQUIPMENT
  CONSUMABLES
  PROTECTIVE_GEAR
}

enum SubscriptionType {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  CUSTOM // Ajouté pour les contrats sur mesure
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
}

enum ActivityType {
  LEAD_CREATED
  LEAD_QUALIFIED
  QUOTE_GENERATED
  QUOTE_SENT
  MISSION_SCHEDULED
  MISSION_STARTED
  MISSION_COMPLETED
  PAYMENT_RECEIVED
  SUBSCRIPTION_CREATED
  QUALITY_ISSUE
  CLIENT_FEEDBACK
}