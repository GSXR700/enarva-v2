// datasource db defines the database connection details.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator client specifies that Prisma Client should be generated.
generator client {
  provider = "prisma-client-js"
}

// --- CORE MODELS ---

// EXPLANATION: Represents all individuals in the system, from admins to technicians.
// This is the central hub for identity and role-based access.
model User {
  id               String          @id @default(cuid())
  name             String?
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?         // Updated field name
  role             UserRole        @default(TECHNICIAN)
  onlineStatus     String          @default("OFFLINE")
  lastSeen         DateTime?
  pushSubscription Json?

  // --- Relationships ---
  accounts         Account[]
  sessions         Session[]
  leadsAssigned    Lead[]          @relation("LeadAssignments")
  missionsLed      Mission[]       @relation("MissionTeamLead")
  teamMemberships  TeamMember[]    // Fixed relationship
  activities       Activity[]
  sentMessages     Message[]       @relation("MessageSender")
  conversations    Conversation[]  @relation("ConversationParticipants")
  expenses         Expense[]
  fieldReports     FieldReport[]
  readMessages     Message[]       @relation("MessageReadBy")
  qualityChecksPerformed QualityCheck[] @relation("QualityCheckPerformedBy")

  // --- Timestamps ---
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("users")
}

// EXPLANATION: Represents a formal group of users (TeamMembers).
// A Team is assigned to a Mission.
model Team {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  
  // --- Relationships ---
  members     TeamMember[] // List of members that belong to this team
  missions    Mission[]    // List of missions assigned to this team

  // --- Timestamps ---
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("teams")
}

// EXPLANATION: The junction model connecting a User to a Team.
// This holds details about a user's role and status within a specific team.
model TeamMember {
  id           String            @id @default(cuid())
  userId       String            
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId       String
  team         Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  // --- Member-specific attributes ---
  specialties  TeamSpecialty[]
  experience   ExperienceLevel   @default(JUNIOR)
  availability TeamAvailability  @default(AVAILABLE)
  hourlyRate   Decimal?          @db.Decimal(8, 2)
  
  // --- AJOUTEZ CES CHAMPS ---
  isActive     Boolean           @default(true)
  joinedAt     DateTime          @default(now())
  
  // --- Relationships ---
  tasks        Task[]
  
  // --- Timestamps ---
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@unique([userId, teamId])      // ADD THIS LINE BEFORE @@map
  @@map("team_members")
}

// EXPLANATION: Represents a potential customer or job opportunity before it's confirmed.
model Lead {
  id                String               @id @default(cuid())
  firstName         String
  lastName          String
  phone             String
  email             String?
  address           String?
  gpsLocation       String?
  status            LeadStatus           @default(NEW)
  score             Int?                 @default(0)
  leadType          LeadType             @default(PARTICULIER)
  serviceType       ServiceType?
  company           String?
  iceNumber         String?
  activitySector    String?
  contactPosition   String?
  department        String?
  propertyType      PropertyType?
  estimatedSurface  Int?
  accessibility     AccessibilityLevel?  @default(EASY)
  materials         Json?
  urgencyLevel      UrgencyLevel?
  budgetRange       String?
  frequency         Frequency?           @default(PONCTUEL)
  contractType      ContractType?        @default(INTERVENTION_UNIQUE)
  needsProducts     Boolean?             @default(false)
  needsEquipment    Boolean?             @default(false)
  providedBy        ProviderType?        @default(ENARVA)
  channel           LeadCanal
  source            String?
  hasReferrer       Boolean?             @default(false)
  referrerContact   String?
  enarvaRole        EnarvaRole?          @default(PRESTATAIRE_PRINCIPAL)
  originalMessage   String
  
  // --- Relationships ---
  assignedToId      String?
  assignedTo        User?                @relation("LeadAssignments", fields: [assignedToId], references: [id])
  quotes            Quote[]
  missions          Mission[]
  activities        Activity[]
  subscription      Subscription?
  expenses          Expense[]
  invoices          Invoice[]

  // --- Timestamps ---
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@map("leads")
}

// EXPLANATION: A formal offer or price estimation sent to a Lead.
// Can be for either services or products.
model Quote {
  id                String               @id @default(cuid())
  quoteNumber       String               @unique
  status            QuoteStatus          @default(DRAFT)
  businessType      QuoteBusinessType    @default(SERVICE)
  lineItems         Json // Detailed list of items/services in the quote.
  subTotalHT        Decimal              @default(0)
  vatAmount         Decimal              @default(0)
  totalTTC          Decimal              @default(0)
  finalPrice        Decimal
  purchaseOrderNumber String?
  orderedBy           String?
  
  // --- Relationships ---
  leadId            String
  lead              Lead                 @relation(fields: [leadId], references: [id])
  missions          Mission[]

  // --- Timestamps & Details ---
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  expiresAt         DateTime?
  type              QuoteType?
  serviceType       String?
  propertyType      PropertyType?
  surface           Int?
  levels            Int?                 @default(1)
  materials         Json?
  productCategory   ProductQuoteCategory?
  productDetails    Json?
  deliveryType      DeliveryType?
  deliveryAddress   String?
  deliveryNotes     String?
  validatedAt       DateTime?

  @@map("quotes")
}

// EXPLANATION: A confirmed and scheduled job, created from a Lead (and optionally a Quote).
model Mission {
  id                   String           @id @default(cuid())
  missionNumber        String           @unique
  status               MissionStatus    @default(SCHEDULED)
  priority             Priority         @default(NORMAL)
  type                 MissionType      @default(SERVICE)
  technicalVisitReport Json?
  scheduledDate        DateTime
  estimatedDuration    Int
  actualStartTime      DateTime?
  actualEndTime        DateTime?
  address              String
  coordinates          String?
  accessNotes          String?
  
  // --- Relationships ---
  teamLeaderId         String?
  teamLeader           User?            @relation("MissionTeamLead", fields: [teamLeaderId], references: [id])
  teamId               String?
  team                 Team?            @relation(fields: [teamId], references: [id]) // The team assigned to this mission.
  leadId               String
  lead                 Lead             @relation(fields: [leadId], references: [id])
  quoteId              String?
  quote                Quote?           @relation(fields: [quoteId], references: [id])
  tasks                Task[]
  qualityChecks        QualityCheck[]
  inventoryUsed        InventoryUsage[]
  expenses             Expense[]
  invoice              Invoice?
  conversation         Conversation?
  fieldReport          FieldReport?
  
  // --- Validation & Feedback ---
  clientValidated      Boolean          @default(false)
  clientFeedback       String?
  clientRating         Int?
  invoiceGenerated     Boolean          @default(false)
  invoiceId            String?          @unique
  adminValidated       Boolean?
  adminValidatedBy     String?
  adminValidatedAt     DateTime?
  adminNotes           String?
  qualityScore         Int?
  issuesFound          String?
  correctionRequired   Boolean?
  
  // --- Timestamps ---
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@map("missions")
}

// EXPLANATION: An individual action item or checklist item within a Mission.
model Task {
  id            String       @id @default(cuid())
  title         String
  description   String?
  category      TaskCategory
  type          TaskType
  status        TaskStatus   @default(ASSIGNED)
  
  // --- Relationships ---
  missionId     String
  mission       Mission      @relation(fields: [missionId], references: [id])
  assignedToId  String?
  assignedTo    TeamMember?  @relation(fields: [assignedToId], references: [id]) // Assigned to a specific team member.

  // --- Time & Tracking ---
  estimatedTime Int?
  actualTime    Int?
  notes         String?
  startedAt     DateTime?
  completedAt   DateTime?
  validatedAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("tasks")
}

// EXPLANATION: A dedicated chat/conversation thread for a specific Mission.
model Conversation {
  id           String    @id @default(cuid())
  missionId    String?   @unique  // âœ… NOW OPTIONAL - allows general user-to-user chat
  mission      Mission?  @relation(fields: [missionId], references: [id])
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("conversations")
}

// EXPLANATION: An individual message within a Mission's Conversation.
model Message {
  id             String       @id @default(cuid())
  content        String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User         @relation("MessageSender", fields: [senderId], references: [id])
  isRead         Boolean      @default(false)
  readBy         User[]       @relation("MessageReadBy")
  attachments    String[]
  createdAt      DateTime     @default(now())

  @@map("messages")
}

// --- OTHER MODELS (CLEANED AND STANDARDIZED) ---

// EXPLANATION: A report submitted from the field for a specific mission.
model FieldReport {
  id                   String   @id @default(cuid())
  missionId            String   @unique
  mission              Mission  @relation(fields: [missionId], references: [id])
  submittedById        String
  submittedBy          User     @relation(fields: [submittedById], references: [id])
  submissionDate       DateTime @default(now())
  generalObservations  String?  @db.Text
  clientFeedback       String?  @db.Text
  issuesEncountered    String?  @db.Text
  materialsUsed        Json?
  hoursWorked          Decimal  @db.Decimal(5, 2)
  beforePhotos         String[]
  afterPhotos          String[]
  clientSignatureUrl   String?
  teamLeadSignatureUrl String?
  additionalNotes      String?  @db.Text

  @@map("field_reports") // Fixed: Add explicit table mapping
}

// EXPLANATION: Next-Auth model for OAuth providers.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// EXPLANATION: Next-Auth model for user sessions.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// EXPLANATION: Next-Auth model for verification tokens (e.g., email verification).
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// EXPLANATION: A reusable template for creating a set of Tasks.
model TaskTemplate {
  id          String       @id @default(cuid())
  name        String
  description String?
  tasks       Json
  category    TaskCategory
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("task_templates")
}

// EXPLANATION: A quality control check performed on a Mission.
model QualityCheck {
  id                String           @id @default(cuid())
  missionId         String
  mission           Mission          @relation(fields: [missionId], references: [id])
  type              QualityCheckType
  status            QualityStatus    @default(PENDING)
  score             Int?
  checkedBy         String?
  checkedByUser     User?            @relation("QualityCheckPerformedBy", fields: [checkedBy], references: [id])
  checkedAt         DateTime?
  validatedAt       DateTime?
  notes             String?          @db.Text
  photos            String[]
  issues            Json?
  corrections       Json?
  followUpRequired  Boolean          @default(false)
  followUpDate      DateTime?
  clientNotified    Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("quality_checks")
  @@index([missionId, status])
  @@index([type, status])
  @@index([checkedAt])
}

// EXPLANATION: Represents a physical inventory item (product, equipment).
model Inventory {
  id           String           @id @default(cuid())
  name         String
  category     ProductCategory
  unit         String
  currentStock Decimal
  minimumStock Decimal
  unitPrice    Decimal
  supplier     String
  usages       InventoryUsage[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("inventory")
}

// EXPLANATION: Records the usage of an Inventory item for a specific Mission.
model InventoryUsage {
  id          String    @id @default(cuid())
  quantity    Decimal
  notes       String?
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  missionId   String
  mission     Mission   @relation(fields: [missionId], references: [id])
  usedAt      DateTime  @default(now())

  @@map("inventory_usage")
}

// EXPLANATION: Represents a recurring service subscription for a Lead.
model Subscription {
  id               String             @id @default(cuid())
  type             SubscriptionType
  status           SubscriptionStatus @default(ACTIVE)
  monthlyPrice     Decimal
  discount         Decimal            @default(0)
  nextBilling      DateTime
  includedServices Int
  usedServices     Int                @default(0)
  leadId           String             @unique
  lead             Lead               @relation(fields: [leadId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("subscriptions")
}

// EXPLANATION: A log of significant events or actions within the application.
model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  title       String
  description String
  metadata    Json?
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  leadId      String?
  lead        Lead?        @relation(fields: [leadId], references: [id])
  createdAt   DateTime     @default(now())

  @@map("activities")
}

// EXPLANATION: Logs for system-level events, like backups or errors.
model SystemLog {
  id        String    @id @default(cuid())
  type      LogType
  status    LogStatus
  message   String
  metadata  Json?
  createdAt DateTime  @default(now())

  @@map("system_logs")
}

// EXPLANATION: Represents a financial invoice for a Mission.
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  status        InvoiceStatus @default(DRAFT)
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  missionId     String        @unique
  mission       Mission       @relation(fields: [missionId], references: [id])
  leadId        String
  lead          Lead          @relation(fields: [leadId], references: [id])
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// EXPLANATION: Records expenses related to a Mission, Lead, or general operations.
model Expense {
  id              String          @id @default(cuid())
  date            DateTime
  amount          Decimal
  category        ExpenseCategory
  subCategory     String
  paymentMethod   PaymentMethod
  vendor          String?
  description     String?
  proofUrl        String?
  rentalStartDate DateTime?
  rentalEndDate   DateTime?
  missionId       String?
  mission         Mission?        @relation(fields: [missionId], references: [id])
  leadId          String?
  lead            Lead?           @relation(fields: [leadId], references: [id])
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("expenses")
}

// --- ENUMS (Consolidated and Organized) ---

enum UserRole {
  ADMIN
  MANAGER
  AGENT
  TEAM_LEADER
  TECHNICIAN
}

enum LeadStatus {
  NEW
  TO_QUALIFY
  WAITING_INFO
  QUALIFIED
  VISIT_PLANNED
  ON_VISIT
  VISIT_DONE
  QUOTE_SENT
  QUOTE_ACCEPTED
  QUOTE_REFUSED
  MISSION_SCHEDULED
  IN_PROGRESS
  COMPLETED
  INTERVENTION_PLANNED
  INTERVENTION_IN_PROGRESS
  INTERVENTION_DONE
  QUALITY_CONTROL
  CLIENT_TO_CONFIRM_END
  CLIENT_CONFIRMED
  DELIVERY_PLANNED
  DELIVERY_DONE
  SIGNED_DELIVERY_NOTE
  PENDING_PAYMENT
  PAID_OFFICIAL
  PAID_CASH
  REFUNDED
  PENDING_REFUND
  FOLLOW_UP_SENT
  UPSELL_IN_PROGRESS
  UPSELL_CONVERTED
  REWORK_PLANNED
  REWORK_DONE
  UNDER_WARRANTY
  AFTER_SALES_SERVICE
  CLIENT_ISSUE
  IN_DISPUTE
  CLIENT_PAUSED
  LEAD_LOST
  CANCELLED
  CANCELED_BY_CLIENT
  CANCELED_BY_ENARVA
  INTERNAL_REVIEW
  AWAITING_PARTS
  CONTRACT_SIGNED
  UNDER_CONTRACT
  SUBCONTRACTED
  OUTSOURCED
  WAITING_THIRD_PARTY
  PRODUCT_ONLY
  PRODUCT_SUPPLIER
  DELIVERY_ONLY
  AFFILIATE_LEAD
  SUBCONTRACTOR_LEAD
}

enum LeadType {
  PARTICULIER
  PROFESSIONNEL
  PUBLIC
  NGO
  SYNDIC
  OTHER
}

enum LeadCanal {
  WHATSAPP
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  GOOGLE_MAPS
  GOOGLE_SEARCH
  SITE_WEB
  FORMULAIRE_SITE
  MARKETPLACE
  YOUTUBE
  EMAIL
  APPORTEUR_AFFAIRES
  COMMERCIAL_TERRAIN
  SALON_PROFESSIONNEL
  PARTENARIAT
  RECOMMANDATION_CLIENT
  VISITE_BUREAU
  EMPLOYE_ENARVA
  APPEL_TELEPHONIQUE
  SMS
  NUMERO_SUR_PUB
  AFFICHE
  FLYER
  ENSEIGNE
  VOITURE_SIGLEE
  RADIO
  ANNONCE_PRESSE
  TELE
  MANUEL
  SOURCING_INTERNE
  PORTE_A_PORTE
  CHANTIER_EN_COURS
}

enum ServiceType {
  GRAND_MENAGE                    // Grand MÃ©nage
  NETTOYAGE_FIN_CHANTIER         // Nettoyage de Fin-Chantier
  NETTOYAGE_CANAPES_MATELAS      // Nettoyage des CanapÃ©s & Matelas
  NETTOYAGE_TAPIS_MOQUETTES      // Nettoyage des Tapis & Moquettes
  NETTOYAGE_VITRES               // Nettoyage des Vitres
  TRAITEMENT_SOL                 // Traitement de Sol
  NETTOYAGE_FOURS                // Nettoyage des Fours
  ENTRETIEN_JARDIN               // Entretien de Jardin
  ENTRETIEN_PISCINE              // Entretien de Piscine
  NETTOYAGE_FACADE               // Nettoyage de FaÃ§ade
  DESINFECTION_SANITAIRE         // DÃ©sinfection Sanitaire
  NETTOYAGE_BUREAUX              // Nettoyage de Bureaux
  ENTRETIEN_REGULIER             // Entretien RÃ©gulier
  CRISTALLISATION_MARBRE         // Cristallisation de Marbre
  VITRIFICATION_PARQUET          // Vitrification de Parquet
  DECAPAGE_SOL                   // DÃ©capage de Sol
  LUSTRAGE_MARBRE                // Lustrage de Marbre
  POLISSAGE_BETON                // Polissage de BÃ©ton
  NETTOYAGE_MOQUETTE_VAPEUR      // Nettoyage Moquette Ã  Vapeur
  AUTRES                         // Autres Services
}

enum PropertyType {
  APARTMENT_SMALL
  APARTMENT_MEDIUM
  APARTMENT_MULTI
  APARTMENT_LARGE
  VILLA_SMALL
  VILLA_MEDIUM
  VILLA_LARGE
  PENTHOUSE
  COMMERCIAL
  STORE
  HOTEL_STANDARD
  HOTEL_LUXURY
  OFFICE
  RESIDENCE_B2B
  BUILDING
  RESTAURANT
  WAREHOUSE
  OTHER
}

enum AccessibilityLevel {
  EASY
  MEDIUM
  MODERATE
  DIFFICULT
  VERY_DIFFICULT
}

enum UrgencyLevel {
  LOW
  NORMAL
  URGENT
  HIGH_URGENT
  IMMEDIATE
}

enum Frequency {
  PONCTUEL
  HEBDOMADAIRE
  MENSUEL
  BIMENSUEL
  TRIMESTRIEL
  QUARTANNE
  SEMESTRIEL
  ANNUEL
  CONTRAT_CADRE
  RECURRING
  AUTRE
}

enum ContractType {
  INTERVENTION_UNIQUE
  MAINTENANCE
  ABONNEMENT
  CONTRAT_CADRE
  RECURRING
  AUTRE
}

enum ProviderType {
  ENARVA
  CLIENT
  MIXTE
}

enum EnarvaRole {
  PRESTATAIRE_PRINCIPAL
  SOUS_TRAITANT
  CO_TRAITANT
  AUTRE
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELLED
}

enum QuoteType {
  EXPRESS
  STANDARD
  PREMIUM
}

enum QuoteBusinessType {
  SERVICE
  PRODUCT
}

enum ProductQuoteCategory {
  FURNITURE
  EQUIPMENT
  CONSUMABLES
  ELECTRONICS
  DECORATION
  TEXTILES
  LIGHTING
  STORAGE
  KITCHEN_ITEMS
  BATHROOM_ITEMS
  OFFICE_SUPPLIES
  OTHER
}

enum DeliveryType {
  PICKUP
  STANDARD_DELIVERY
  EXPRESS_DELIVERY
  SCHEDULED_DELIVERY
  WHITE_GLOVE
}

enum MissionStatus {
  SCHEDULED
  IN_PROGRESS
  QUALITY_CHECK
  CLIENT_VALIDATION
  COMPLETED
  CANCELLED
}

enum MissionType {
  SERVICE
  TECHNICAL_VISIT
  DELIVERY
  INTERNAL
  RECURRING
}

enum Priority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum TaskCategory {
  GENERAL
  EXTERIOR_FACADE
  WALLS_BASEBOARDS
  FLOORS
  STAIRS
  WINDOWS_JOINERY
  KITCHEN
  BATHROOM_SANITARY
  LIVING_SPACES
  LOGISTICS_ACCESS
}

enum TaskType {
  BATHROOM_CLEANING
  WINDOW_CLEANING
  FLOOR_CLEANING
  SURFACE_CLEANING
  DETAIL_FINISHING
  SETUP
  CLEANUP

  // New generic workflow types needed by the application
  EXECUTION
  QUALITY_CHECK
  DOCUMENTATION
  CLIENT_INTERACTION
}

enum TaskStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  VALIDATED
  REJECTED
}

enum TeamSpecialty {
  GENERAL_CLEANING
  WINDOW_SPECIALIST
  FLOOR_SPECIALIST
  LUXURY_SURFACES
  EQUIPMENT_HANDLING
  TEAM_MANAGEMENT
  QUALITY_CONTROL
  DETAIL_FINISHING
}

enum ExperienceLevel {
  JUNIOR
  INTERMEDIATE
  SENIOR
  EXPERT
}

enum TeamAvailability {
  AVAILABLE
  BUSY
  OFF_DUTY
  VACATION
}

enum QualityCheckType {
  TEAM_LEADER_CHECK
  FINAL_INSPECTION
  CLIENT_WALKTHROUGH
}

enum QualityStatus {
  PENDING
  PASSED
  FAILED
  NEEDS_CORRECTION
}

enum ProductCategory {
  CLEANING_PRODUCTS
  EQUIPMENT
  CONSUMABLES
  PROTECTIVE_GEAR
}

enum SubscriptionType {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  CUSTOM
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
}

enum ActivityType {
  LEAD_CREATED
  LEAD_QUALIFIED
  QUOTE_GENERATED
  QUOTE_SENT
  MISSION_SCHEDULED
  MISSION_STARTED
  MISSION_COMPLETED
  MISSION_STATUS_UPDATED
  PAYMENT_RECEIVED
  SUBSCRIPTION_CREATED
  QUALITY_ISSUE
  CLIENT_FEEDBACK
  USER_CREATED          // FIXED: Added missing enum value
  USER_DELETED
  TEAM_CREATED           // ADDED: Proper enum value for team creation
  TEAM_UPDATED           // ADDED: Proper enum value for team updates
  TEAM_DELETED           // ADDED: Proper enum value for team deletion          // FIXED: Added missing enum value
  TEAM_MEMBER_CREATED   // FIXED: Added missing enum value
  TEAM_MEMBER_UPDATED   // FIXED: Added missing enum value
  TEAM_MEMBER_DELETED   // FIXED: Added missing enum value
  SYSTEM_MAINTENANCE
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum ExpenseCategory {
  OPERATIONS
  REVENTE_NEGOCE
  RESSOURCES_HUMAINES
  ADMINISTRATIF_FINANCIER
  MARKETING_COMMERCIAL
  LOGISTIQUE_MOBILITE
  INFRASTRUCTURES_LOCAUX
  LOCATIONS
  EXCEPTIONNELLES_DIVERSES
}

enum PaymentMethod {
  CASH
  VIREMENT
  CARTE
  CHEQUE
  MOBILE
  AUTRE
}

enum LogType {
  BACKUP
  ERROR
  INFO
  SECURITY
}

enum LogStatus {
  SUCCESS
  FAILED
  IN_PROGRESS
}