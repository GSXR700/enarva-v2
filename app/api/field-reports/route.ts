// app/api/field-reports/route.ts
import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

const prisma = new PrismaClient()

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user) {
      return new NextResponse('Unauthorized', { status: 401 })
    }

    const fieldReports = await prisma.fieldReport.findMany({
      include: {
        mission: {
          include: {
            lead: true,
            teamLeader: true
          }
        },
        submittedBy: true
      },
      orderBy: { submissionDate: 'desc' }
    })

    return NextResponse.json(fieldReports)
  } catch (error) {
    console.error('Failed to fetch field reports:', error)
    return new NextResponse('Internal Server Error', { status: 500 })
  }
}

export async function POST(request: Request) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user) {
      return new NextResponse('Unauthorized', { status: 401 })
    }

    const {
      missionId,
      qualityCheckId,
      autoGenerated,
      generalObservations,
      clientFeedback,
      issuesEncountered,
      materialsUsed,
      hoursWorked,
      beforePhotos,
      afterPhotos,
      clientSignatureUrl,
      teamLeadSignatureUrl,
      additionalNotes
    } = await request.json()

    if (!missionId) {
      return new NextResponse('Missing missionId', { status: 400 })
    }

    // Get mission details for auto-generated report
    const mission = await prisma.mission.findUnique({
      where: { id: missionId },
      include: {
        lead: true,
        teamLeader: true,
        tasks: true,
        qualityChecks: qualityCheckId ? {
          where: { id: qualityCheckId },
          take: 1
        } : {
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    })

    if (!mission) {
      return new NextResponse('Mission not found', { status: 404 })
    }

    // Auto-generate content if this is an auto-generated report
    let reportData = {
      missionId,
      submittedById: session.user.id,
      generalObservations,
      clientFeedback,
      issuesEncountered,
      materialsUsed,
      hoursWorked: hoursWorked ? parseFloat(hoursWorked) : 0,
      beforePhotos: beforePhotos || [],
      afterPhotos: afterPhotos || [],
      clientSignatureUrl,
      teamLeadSignatureUrl,
      additionalNotes
    }

    if (autoGenerated) {
      const qualityCheck = mission.qualityChecks[0]
      const completedTasks = mission.tasks.filter((task: any) => task.status === 'VALIDATED')
      
      reportData = {
        ...reportData,
        generalObservations: generateGeneralObservations(mission, completedTasks, qualityCheck),
        clientFeedback: "Rapport généré automatiquement suite au contrôle qualité.",
        issuesEncountered: qualityCheck?.issues ? JSON.stringify(qualityCheck.issues) : null,
        hoursWorked: mission.estimatedDuration || 0,
        additionalNotes: `Rapport de terrain généré automatiquement le ${new Date().toLocaleDateString('fr-FR')} suite au contrôle qualité ${qualityCheck?.type || 'FINAL_INSPECTION'}.`
      }
    }

    const fieldReport = await prisma.$transaction(async (tx) => {
      // Create field report
      const report = await tx.fieldReport.create({
        data: reportData,
        include: {
          mission: {
            include: {
              lead: true
            }
          },
          submittedBy: true
        }
      })

      // Update mission status to COMPLETED if quality check passed
      if (autoGenerated && mission.qualityChecks[0]?.status === 'PASSED') {
        await tx.mission.update({
          where: { id: missionId },
          data: {
            status: 'COMPLETED',
            actualEndTime: new Date()
          }
        })
      }

      // Create activity log
      await tx.activity.create({
        data: {
          type: 'MISSION_COMPLETED',
          title: autoGenerated ? 'Rapport de terrain généré automatiquement' : 'Rapport de terrain soumis',
          description: `Rapport de terrain ${autoGenerated ? 'généré automatiquement' : 'créé'} pour la mission ${report.mission.missionNumber}`,
          userId: session.user.id,
          leadId: report.mission.leadId,
        }
      })

      return report
    })

    return NextResponse.json(fieldReport, { status: 201 })
  } catch (error) {
    console.error('Failed to create field report:', error)
    return new NextResponse('Internal Server Error', { status: 500 })
  }
}

function generateGeneralObservations(mission: any, completedTasks: any[], qualityCheck: any): string {
  const observations = []
  
  observations.push(`Mission ${mission.missionNumber} réalisée le ${new Date(mission.scheduledDate).toLocaleDateString('fr-FR')} à ${mission.address}.`)
  
  if (mission.teamLeader) {
    observations.push(`Équipe dirigée par ${mission.teamLeader.name}.`)
  }
  
  observations.push(`${completedTasks.length} tâche${completedTasks.length !== 1 ? 's' : ''} complétée${completedTasks.length !== 1 ? 's' : ''} et validée${completedTasks.length !== 1 ? 's' : ''}.`)
  
  if (qualityCheck?.score) {
    observations.push(`Score qualité: ${qualityCheck.score}/10.`)
  }
  
  if (qualityCheck?.status === 'PASSED') {
    observations.push("Mission approuvée lors du contrôle qualité.")
  }
  
  observations.push("Toutes les tâches ont été exécutées conformément aux standards de qualité Enarva.")
  
  return observations.join(' ')
}