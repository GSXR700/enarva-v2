// lib/pdf-generator.ts - MODIFIED PDF GENERATOR USING CUSTOM FIELDS
import jsPDF from 'jspdf';
import { poppinsNormal, poppinsBold } from './fonts';
import { PDF_IMAGES } from './pdf-assets';
import {
  BLUE_PRIMARY,
  TEXT_DARK,
  PAGE_WIDTH,
  PAGE_HEIGHT,
  MARGIN_LEFT,
  MARGIN_RIGHT,
  CONTENT_WIDTH,
  setColor,
  formatCurrency,
  numberToFrenchWords,
  generateObjectTitle, // Keep this as requested
  // Removed: loadPDFContent
} from './pdf-utils'; // pdf-utils might still be needed for colors, formatting etc.
// Removed: pdf-material-products imports

// Type definitions for the PDF data structure - Updated 'prestation'
export type QuotePDFData = {
  docType: "DEVIS" | "FACTURE";
  number: string;
  date: string;
  purchaseOrderNumber?: string;
  orderedBy?: string;
  company: {
    name: string;
    address: string[];
    ice: string;
    if: string;
    rc: string;
    rib: string;
  };
  recipient: {
    isB2B: boolean;
    attention: string;
    addressLines: string[];
  };
  project: {
    serviceType: string | null;
    businessType: 'SERVICE' | 'PRODUCT';
    propertyType: string | null;
    surface: number | null;
    levels: number | null;
    objet: string; // Will be generated by generateObjectTitle
  };
  lineItems?: Array<{
    description: string;
    quantity: number;
    unitPrice: number;
    totalPrice: number;
    unit?: string;
  }> | undefined;
  // --- MODIFIED: Use direct custom fields ---
  prestation?: {
    customPersonnelMobilise?: string | null;
    customEquipementsProduits?: string | null;
    customPrestationsIncluses?: string | null;
    customDelaiPrevu?: string | null;
  } | undefined;
  // --- END MODIFIED ---
  pricing: {
    subTotalHT: number;
    vatAmount: number;
    totalTTC: number;
    amountInWords: string;
  };
  payment: {
    title: string;
    conditions: string[];
  };
};

/**
 * Renders text, splitting sentences ending in a dot into separate bullet points,
 * and handling line breaks within each point.
 */
function renderBulletedText(doc: jsPDF, text: string | null | undefined, startX: number, startY: number, maxWidth: number): number {
  if (!text || text.trim() === '') {
    return startY; // Skip if empty
  }

  let currentY = startY;
  const lineSpacing = 13; // Line height for wrapped text
  const pointSpacing = 5; // Extra space between distinct bullet points

  // Split the text into potential bullet points based on dots.
  // We keep the dot temporarily to split correctly, then remove it.
  const points = text
    .split('.') // Split by dot
    .map(p => p.trim()) // Trim whitespace around each potential point
    .filter(p => p.length > 0); // Remove empty strings resulting from multiple dots or end dot

  points.forEach((pointText) => {
    // Wrap the text for this specific bullet point if it's too long
    const lines = doc.splitTextToSize(pointText, maxWidth);

    lines.forEach((line: string, index: number) => {
      // Add bullet only to the first line of each point
      const prefix = index === 0 ? '• ' : '  '; // Indent subsequent lines
      doc.text(prefix + line, startX, currentY);
      currentY += lineSpacing;
    });

    // Add a little extra space after each full bullet point (after its last line)
    currentY += pointSpacing;
  });

  // Adjust Y position: remove the last extra pointSpacing if points were added
  return points.length > 0 ? currentY - pointSpacing : startY;
}


/**
 * Generates a pixel-perfect PDF document matching Enarva's design with embedded images
 */
export function generateQuotePDF(data: QuotePDFData): Uint8Array {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'pt',
    format: 'a4',
  });

  // Load Poppins fonts
  try {
    doc.addFileToVFS('Poppins-Regular.ttf', poppinsNormal);
    doc.addFont('Poppins-Regular.ttf', 'Poppins', 'normal');
    doc.addFileToVFS('Poppins-Bold.ttf', poppinsBold);
    doc.addFont('Poppins-Bold.ttf', 'Poppins', 'bold');
  } catch (e) {
    console.warn("Error loading Poppins fonts:", e);
  }

  // Background Watermark Logo
  try {
    if (PDF_IMAGES.BG_LOGO) {
      const logoWidth = 600;
      const logoHeight = 848;
      const logoX = (PAGE_WIDTH - logoWidth) / 2;
      const logoY = (PAGE_HEIGHT - logoHeight) / 2;
      doc.addImage(
        PDF_IMAGES.BG_LOGO, 'PNG', logoX, logoY, logoWidth, logoHeight, undefined, 'FAST'
      );
    }
  } catch (e) {
    console.warn("Background logo error:", e);
  }

  let yPos = 0;

  // 1. HEADER
  const headerHeight = 100;
  // Gradient background... (kept as is)
  for (let i = 0; i < headerHeight; i++) {
      const ratio = i / headerHeight;
      const r = Math.floor(28 + (30 - 28) * ratio);
      const g = Math.floor(63 + (58 - 63) * ratio);
      const b = Math.floor(145 + (138 - 145) * ratio);
      doc.setFillColor(r, g, b);
      doc.rect(0, i, PAGE_WIDTH, 1, 'F');
    }
  // Header text... (kept as is)
    doc.setTextColor(255, 255, 255);
    doc.setFont('Poppins', 'bold');
    doc.setFontSize(36);
    doc.text(data.docType, MARGIN_LEFT, 50);
    doc.setFont('Poppins', 'normal');
    doc.setFontSize(9);
    doc.text(`Date: ${data.date}`, MARGIN_LEFT, 70);
    doc.text(`N ° ${data.number}`, MARGIN_LEFT, 85);
    doc.setFont('Poppins', 'bold');
    doc.setFontSize(40);
    doc.text('enarva', PAGE_WIDTH - MARGIN_RIGHT - 130, 55);

  yPos = 120;

  // 2. COMPANY AND CLIENT INFO (kept as is)
  doc.setFont('Poppins', 'bold');
  doc.setFontSize(10);
  setColor(doc, TEXT_DARK);
  doc.text(data.company.name, MARGIN_LEFT, yPos);
  yPos += 14;
  doc.setFont('Poppins', 'normal');
  doc.setFontSize(9);
  data.company.address.forEach((line) => {
    doc.text(line, MARGIN_LEFT, yPos);
    yPos += 12;
  });
  let clientYPos = 120;
  doc.setFont('Poppins', 'bold');
  doc.setFontSize(10);
  if (data.recipient.isB2B) {
    doc.text(data.recipient.attention.toUpperCase(), PAGE_WIDTH - MARGIN_RIGHT, clientYPos, { align: 'right' });
  } else {
    doc.text(`À l'attention de ${data.recipient.attention}`, PAGE_WIDTH - MARGIN_RIGHT, clientYPos, { align: 'right' });
  }
  clientYPos += 14;
  doc.setFont('Poppins', 'normal');
  doc.setFontSize(9);
  data.recipient.addressLines.forEach((line) => {
    doc.text(line, PAGE_WIDTH - MARGIN_RIGHT, clientYPos, { align: 'right' });
    clientYPos += 12;
  });
  yPos = Math.max(yPos, clientYPos) + 20;

  // 3. PURCHASE ORDER INFO (kept as is)
  if (data.project.businessType === 'PRODUCT' && data.purchaseOrderNumber && data.orderedBy) {
    doc.setFont('Poppins', 'normal');
    doc.setFontSize(9);
    setColor(doc, BLUE_PRIMARY);
    doc.text(`N° Bon de Commande: ${data.purchaseOrderNumber}`, MARGIN_LEFT, yPos);
    yPos += 15;
    doc.text(`Commandé par: ${data.orderedBy}`, MARGIN_LEFT, yPos);
    yPos += 20;
  }

  // 4. OBJET SECTION (kept as is)
  if (data.project.businessType === 'SERVICE') {
    const objetBoxHeight = 32;
    const objetBoxY = yPos;
    doc.setFillColor(59, 130, 246);
    doc.roundedRect(MARGIN_LEFT, objetBoxY, CONTENT_WIDTH, objetBoxHeight, 8, 8, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFont('Poppins', 'bold');
    doc.setFontSize(11);
    const objetText = `OBJET : ${data.project.objet}`;
    const objetTextWidth = doc.getTextWidth(objetText);
    const objetTextX = MARGIN_LEFT + (CONTENT_WIDTH - objetTextWidth) / 2;
    doc.text(objetText, objetTextX, objetBoxY + 20);
    yPos = objetBoxY + objetBoxHeight + 25;
  }

  // 5. CONTENT SECTION - MODIFIED
  if (data.project.businessType === 'SERVICE' && data.prestation) {
    yPos = renderServiceSection(doc, data.prestation, yPos); // Call updated function
  } else if (data.lineItems) {
    yPos = renderProductTable(doc, data.lineItems, yPos, data.project.serviceType); // Kept as is
  }

  // 6. TABLEAU FORFAIT (kept as is for SERVICE)
  if (data.project.businessType === 'SERVICE') {
    yPos += 10;
    const tableStartY = yPos;
    const headerRowHeight = 45;
    const dataRowHeight = 50;
    const tableRadius = 8;
    // Header...
    doc.setFillColor(30, 58, 138);
    doc.roundedRect(MARGIN_LEFT, tableStartY, CONTENT_WIDTH, headerRowHeight, tableRadius, tableRadius, 'F');
    doc.rect(MARGIN_LEFT, tableStartY + headerRowHeight - tableRadius, CONTENT_WIDTH, tableRadius, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFont('Poppins', 'bold');
    doc.setFontSize(10);
    doc.text('Désignation', MARGIN_LEFT + 15, tableStartY + 28);
    doc.text('Quantité', MARGIN_LEFT + 300, tableStartY + 28, { align: 'center' });
    doc.text('Prix unit. HT', MARGIN_LEFT + 395, tableStartY + 28, { align: 'center' });
    doc.text('Total HT', MARGIN_LEFT + CONTENT_WIDTH - 15, tableStartY + 28, { align: 'right' });
    // Data row...
    yPos = tableStartY + headerRowHeight;
    doc.setFillColor(255, 255, 255);
    doc.rect(MARGIN_LEFT, yPos, CONTENT_WIDTH, dataRowHeight, 'F');
    setColor(doc, TEXT_DARK);
    doc.setFont('Poppins', 'normal');
    doc.setFontSize(9);
    const designationLines = doc.splitTextToSize(data.project.objet, 220);
    const designationHeight = designationLines.length * 12;
    const designationStartY = yPos + (dataRowHeight - designationHeight) / 2 + 10;
    designationLines.forEach((line: string, index: number) => {
        doc.text(line, MARGIN_LEFT + 15, designationStartY + (index * 12));
    });
    doc.text('Forfait', MARGIN_LEFT + 300, yPos + 28, { align: 'center' });
    doc.text(formatCurrency(data.pricing.subTotalHT), MARGIN_LEFT + 395, yPos + 28, { align: 'center' });
    doc.text(formatCurrency(data.pricing.subTotalHT), MARGIN_LEFT + CONTENT_WIDTH - 15, yPos + 28, { align: 'right' });
    // Border...
    doc.setDrawColor(30, 58, 138);
    doc.setLineWidth(1.5);
    doc.roundedRect(MARGIN_LEFT, tableStartY, CONTENT_WIDTH, headerRowHeight + dataRowHeight, tableRadius, tableRadius,'S');
    doc.line(MARGIN_LEFT, tableStartY + headerRowHeight, MARGIN_LEFT + CONTENT_WIDTH, tableStartY + headerRowHeight);
    yPos += dataRowHeight + 25;
  }

  // 7. PRICING SECTION (kept as is)
  const pricingY = yPos;
  doc.setDrawColor(30, 58, 138);
  doc.setLineWidth(1.5);
  doc.line(MARGIN_LEFT, pricingY, MARGIN_LEFT + CONTENT_WIDTH, pricingY);
  yPos = pricingY + 15;
  const leftSectionWidth = CONTENT_WIDTH * 0.50;
  const separatorX = MARGIN_LEFT + leftSectionWidth;
  // Left side - Price text...
  const amountInWordsLower = data.pricing.amountInWords.toLowerCase();
  const priceText = data.docType === 'DEVIS'
    ? `veuillez arrêter le présent devis à la somme de ${amountInWordsLower}.`
    : `veuillez arrêter la présente facture au montant de ${amountInWordsLower}, toutes taxes comprises.`;
  doc.setFont('Poppins', 'normal');
  doc.setFontSize(10);
  setColor(doc, BLUE_PRIMARY);
  const priceLines = doc.splitTextToSize(priceText, leftSectionWidth - 20);
  priceLines.forEach((line: string, index: number) => {
    doc.text(line, MARGIN_LEFT, yPos + (index * 11));
  });
  // Separator...
  doc.setDrawColor(30, 58, 138);
  doc.setLineWidth(2.5);
  const separatorHeight = data.docType === 'FACTURE' ? 50 : 32;
  doc.line(separatorX, pricingY + 5, separatorX, yPos + separatorHeight);
  // Right side - Amounts...
  const priceBoxX = separatorX + 25;
  if (data.docType === 'FACTURE') {
    setColor(doc, TEXT_DARK);
    doc.setFont('Poppins', 'bold');
    doc.setFontSize(10);
    doc.text('MONTANT TOTAL HT', priceBoxX, yPos + 10);
    doc.text(':', priceBoxX + 125, yPos + 10);
    doc.text(formatCurrency(data.pricing.subTotalHT), priceBoxX + 135, yPos + 10);
    doc.text('TVA (20%)', priceBoxX, yPos + 26);
    doc.text(':', priceBoxX + 125, yPos + 26);
    doc.text(formatCurrency(data.pricing.vatAmount), priceBoxX + 135, yPos + 26);
    doc.setFontSize(12);
    doc.text('TOTAL TTC', priceBoxX, yPos + 45);
    doc.text(':', priceBoxX + 125, yPos + 45);
    doc.text(formatCurrency(data.pricing.totalTTC), priceBoxX + 135, yPos + 45);
  } else {
    setColor(doc, TEXT_DARK);
    doc.setFont('Poppins', 'bold');
    doc.setFontSize(12);
    doc.text('MONTANT TOTAL HT', priceBoxX, yPos + 20);
    doc.text(':', priceBoxX + 135, yPos + 20);
    doc.text(formatCurrency(data.pricing.subTotalHT), priceBoxX + 145, yPos + 20);
  }
  // Bottom line...
  yPos += data.docType === 'FACTURE' ? 58 : 42;
  doc.setDrawColor(30, 58, 138);
  doc.setLineWidth(1.5);
  doc.line(MARGIN_LEFT, yPos, MARGIN_LEFT + CONTENT_WIDTH, yPos);
  yPos += 18;

  // 8. PAYMENT CONDITIONS (kept as is)
  doc.setFont('Poppins', 'bold');
  doc.setFontSize(10);
  setColor(doc, BLUE_PRIMARY);
  doc.text(data.payment.title, MARGIN_LEFT, yPos);
  yPos += 16;
  doc.setFont('Poppins', 'normal');
  doc.setFontSize(9);
  setColor(doc, TEXT_DARK);
  const bulletIndent = 10;
  const textIndent = 18;
  const conditionsMaxWidth = CONTENT_WIDTH - textIndent;
  data.payment.conditions.forEach((condition) => {
    const lines = doc.splitTextToSize(condition, conditionsMaxWidth);
    doc.text('•', MARGIN_LEFT + bulletIndent, yPos);
    lines.forEach((line: string) => {
        doc.text(line, MARGIN_LEFT + textIndent, yPos);
        yPos += 14;
    });
  });

  // 9. FOOTER (kept as is)
  const footerHeight = 85;
  const footerY = PAGE_HEIGHT - footerHeight;
  const footerRadius = 12;
  doc.setFillColor(30, 58, 138);
  doc.roundedRect(MARGIN_LEFT, footerY, CONTENT_WIDTH, footerHeight, footerRadius, footerRadius, 'F');
  doc.rect(MARGIN_LEFT, footerY + footerHeight - footerRadius, CONTENT_WIDTH, footerRadius, 'F');
  // Left section...
  const textStartX = MARGIN_LEFT + 15;
  const topMargin = 18;
  doc.setTextColor(255, 255, 255);
  doc.setFont('Poppins', 'bold');
  doc.setFontSize(22);
  doc.text('enarva', textStartX, footerY + 28);
  const enarvaWidth = doc.getTextWidth('enarva');
  doc.setFont('Poppins', 'normal');
  doc.setFontSize(9);
  doc.text('sarl au', textStartX + enarvaWidth + 6, footerY + 28);
  doc.setFont('Poppins', 'normal');
  doc.setFontSize(8);
  doc.text('53, 2ème étage, Appartement 15,  Avenue Brahim Roudani - Océan, Rabat - Maroc', textStartX, footerY + topMargin + 28);
  doc.text('Téléphone : 06 38 146-573 • Site web : www.enarva.com • e-mail : contact@enarva.com', textStartX, footerY + topMargin + 41);
  doc.text(`IF : ${data.company.if} • RC : ${data.company.rc} • ICE : ${data.company.ice} • RIB : ${data.company.rib}`, textStartX, footerY + topMargin + 54);
  // Right section (QR code)...
  try {
    if (PDF_IMAGES.BARCODE) {
        const qrSize = 70;
        const qrX = MARGIN_LEFT + CONTENT_WIDTH - qrSize - 15;
        const qrY = footerY + (footerHeight - qrSize) / 2;
        doc.addImage(PDF_IMAGES.BARCODE, 'PNG', qrX, qrY, qrSize, qrSize, undefined, 'FAST');
    }
  } catch (e) {
    console.warn("QR code error:", e);
  }

  const buffer = doc.output('arraybuffer');
  return new Uint8Array(buffer);
}

// --- END OF PART 1 ---
// --- PART 2 START ---

/**
 * Renders the service details section using custom text fields.
 */
function renderServiceSection(
  doc: jsPDF,
  prestation: NonNullable<QuotePDFData['prestation']>,
  startY: number
): number {
  let yPos = startY;
  const bulletStartX = MARGIN_LEFT + 10;
  const textMaxWidth = CONTENT_WIDTH - 20; // Max width for bulleted text

  doc.setFont('Poppins', 'bold');
  doc.setFontSize(11);
  setColor(doc, BLUE_PRIMARY);
  doc.text('I. PRESTATIONS INCLUSES', MARGIN_LEFT, yPos);
  yPos += 18;

  // 1. Personnel Mobilisé
  if (prestation.customPersonnelMobilise && prestation.customPersonnelMobilise.trim()) {
    doc.setFont('Poppins', 'bold');
    doc.setFontSize(10);
    doc.text('1- Personnel mobilisé:', MARGIN_LEFT, yPos);
    yPos += 14;

    doc.setFont('Poppins', 'normal');
    doc.setFontSize(9);
    setColor(doc, TEXT_DARK);
    yPos = renderBulletedText(doc, prestation.customPersonnelMobilise, bulletStartX, yPos, textMaxWidth);
    yPos += 8; // Spacing after section
  }

  // 2. Équipements et Produits
  if (prestation.customEquipementsProduits && prestation.customEquipementsProduits.trim()) {
    doc.setFont('Poppins', 'bold');
    doc.setFontSize(10);
    setColor(doc, BLUE_PRIMARY);
    // Adjusted title to match the original intent better
    doc.text('2- Équipements et produits spécifiques utilisés:', MARGIN_LEFT, yPos);
    yPos += 14;

    doc.setFont('Poppins', 'normal');
    doc.setFontSize(9);
    setColor(doc, TEXT_DARK);
    yPos = renderBulletedText(doc, prestation.customEquipementsProduits, bulletStartX, yPos, textMaxWidth);
    yPos += 8; // Spacing after section
  }

  // 3. Prestations Incluses
  if (prestation.customPrestationsIncluses && prestation.customPrestationsIncluses.trim()) {
    doc.setFont('Poppins', 'bold');
    doc.setFontSize(10);
    setColor(doc, BLUE_PRIMARY);
    doc.text('3- Détail des prestations:', MARGIN_LEFT, yPos);
    yPos += 14;

    doc.setFont('Poppins', 'normal');
    doc.setFontSize(9);
    setColor(doc, TEXT_DARK);
    yPos = renderBulletedText(doc, prestation.customPrestationsIncluses, bulletStartX, yPos, textMaxWidth);
    yPos += 8; // Spacing after section
  }

  // 4. Délai Prévu
  if (prestation.customDelaiPrevu && prestation.customDelaiPrevu.trim()) {
    doc.setFont('Poppins', 'bold');
    doc.setFontSize(10);
    setColor(doc, BLUE_PRIMARY);
    doc.text('4- Délai prévu de la prestation:', MARGIN_LEFT, yPos);
    yPos += 14;

    doc.setFont('Poppins', 'normal');
    doc.setFontSize(9);
    setColor(doc, TEXT_DARK);
    yPos = renderBulletedText(doc, prestation.customDelaiPrevu, bulletStartX, yPos, textMaxWidth);
  }

  yPos += 20; // Final spacing

  return yPos;
}

/**
 * Renders the product table (kept mostly as is).
 */
function renderProductTable(
  doc: jsPDF,
  lineItems: QuotePDFData['lineItems'],
  startY: number,
  serviceType: string | null // Still needed for potential 'ml' unit
): number {
  let yPos = startY;
  const isLinearMeter = serviceType === 'NETTOYAGE_CANAPES_MATELAS'; // Updated enum name? Check schema.prisma

  const tableStartY = yPos;
  const headerHeight = 45;
  const rowHeight = 35;
  const tableRadius = 8;

  // Header styling (kept as is)
  doc.setFillColor(30, 58, 138);
  doc.roundedRect(MARGIN_LEFT, tableStartY, CONTENT_WIDTH, headerHeight, tableRadius, tableRadius, 'F');
  doc.rect(MARGIN_LEFT, tableStartY + headerHeight - tableRadius, CONTENT_WIDTH, tableRadius, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFont('Poppins', 'bold');
  doc.setFontSize(10);

  // Header text (kept as is, including linear meter check)
  if (isLinearMeter) {
    doc.text('Désignation', MARGIN_LEFT + 15, tableStartY + 28);
    doc.text('Quantité', MARGIN_LEFT + 280, tableStartY + 28, { align: 'center' });
    doc.text('Unité', MARGIN_LEFT + 350, tableStartY + 28, { align: 'center' });
    doc.text('PU HT', MARGIN_LEFT + 420, tableStartY + 28, { align: 'center' });
    doc.text('Total HT', MARGIN_LEFT + CONTENT_WIDTH - 15, tableStartY + 28, { align: 'right' });
  } else {
    doc.text('Désignation', MARGIN_LEFT + 15, tableStartY + 28);
    doc.text('Quantité', MARGIN_LEFT + 300, tableStartY + 28, { align: 'center' });
    doc.text('PU HT', MARGIN_LEFT + 395, tableStartY + 28, { align: 'center' });
    doc.text('Total HT', MARGIN_LEFT + CONTENT_WIDTH - 15, tableStartY + 28, { align: 'right' });
  }

  yPos += headerHeight;
  setColor(doc, TEXT_DARK);
  doc.setFont('Poppins', 'normal');
  doc.setFontSize(9);

  // Rows (kept as is)
  if (lineItems) {
    lineItems.forEach((item, index) => {
      const rowY = yPos + (index * rowHeight);
      doc.setFillColor(index % 2 === 0 ? 250 : 255, 250, 250); // Simplified alternating color
      doc.rect(MARGIN_LEFT, rowY, CONTENT_WIDTH, rowHeight, 'F');
      const verticalCenter = rowY + (rowHeight / 2) + 3;

      if (isLinearMeter) {
          doc.text(item.description, MARGIN_LEFT + 15, verticalCenter);
          doc.text(item.quantity.toString(), MARGIN_LEFT + 280, verticalCenter, { align: 'center' });
          doc.text(item.unit || 'ml', MARGIN_LEFT + 350, verticalCenter, { align: 'center' }); // Use 'ml' if unit missing
          doc.text(formatCurrency(item.unitPrice), MARGIN_LEFT + 420, verticalCenter, { align: 'center' });
          doc.text(formatCurrency(item.totalPrice), MARGIN_LEFT + CONTENT_WIDTH - 15, verticalCenter, { align: 'right' });
      } else {
          const descLines = doc.splitTextToSize(item.description, 220);
          const descHeight = descLines.length * 11;
          const descStartY = rowY + (rowHeight - descHeight) / 2 + 8;
          descLines.forEach((line: string, lineIndex: number) => {
              doc.text(line, MARGIN_LEFT + 15, descStartY + (lineIndex * 11));
          });
          doc.text(item.quantity.toString(), MARGIN_LEFT + 300, verticalCenter, { align: 'center' });
          doc.text(formatCurrency(item.unitPrice), MARGIN_LEFT + 395, verticalCenter, { align: 'center' });
          doc.text(formatCurrency(item.totalPrice), MARGIN_LEFT + CONTENT_WIDTH - 15, verticalCenter, { align: 'right' });
      }
      // Line border...
      doc.setDrawColor(220, 220, 220);
      doc.setLineWidth(0.5);
      if (index < lineItems.length - 1) {
          doc.line(MARGIN_LEFT, rowY + rowHeight, MARGIN_LEFT + CONTENT_WIDTH, rowY + rowHeight);
      }
    });
    yPos += (lineItems.length * rowHeight);
  }

  // Table border (kept as is)
  doc.setDrawColor(30, 58, 138);
  doc.setLineWidth(1.5);
  const totalTableHeight = headerHeight + (lineItems ? lineItems.length * rowHeight : 0);
  doc.roundedRect(MARGIN_LEFT, tableStartY, CONTENT_WIDTH, totalTableHeight, tableRadius, tableRadius, 'S');
  doc.line(MARGIN_LEFT, tableStartY + headerHeight, MARGIN_LEFT + CONTENT_WIDTH, tableStartY + headerHeight);

  return yPos + 10;
}

/**
 * Prepares data for PDF generation, using custom prestation fields.
 */
export function prepareQuotePDFData(
  quote: any, // Assuming 'quote' is the full object from Prisma, including custom fields
  docType: 'DEVIS' | 'FACTURE' = 'DEVIS'
): QuotePDFData {
  const today = new Date().toLocaleDateString('fr-FR', {
    day: '2-digit', month: 'short', year: 'numeric'
  });

  // Removed: loadPDFContent() call
  const isB2B = quote.lead.leadType === 'PROFESSIONNEL' || quote.lead.leadType === 'B2B'; // Kept as is

  // Recipient info generation (kept as is)
  let recipientAttention = '';
  let recipientAddressLines: string[] = [];
  if (isB2B) {
      recipientAttention = quote.lead.company || 'Entreprise';
      recipientAddressLines = [
          quote.lead.address || 'Adresse non spécifiée',
          'Maroc'
      ];
      if (quote.lead.iceNumber) {
          recipientAddressLines.push(`ICE: ${quote.lead.iceNumber}`);
      }
  } else {
      recipientAttention = `${quote.lead.firstName || ''} ${quote.lead.lastName || ''}`.trim();
      recipientAddressLines = [
          quote.lead.address || 'Adresse non spécifiée',
          'Maroc'
      ];
  }

  // --- MODIFIED: generateObjectTitle needs a dummy pdfContent or adjust its signature ---
  // Passing an empty object {} might work if generateObjectTitle handles missing keys gracefully.
  // If not, you might need to provide minimal structure, e.g., { serviceTypes: {}, propertyTypes: {} }
  const dummyPdfContent = { serviceTypes: {}, propertyTypes: {} };
  const objectTitle = generateObjectTitle(
    quote.serviceType,
    quote.propertyType,
    quote.surface,
    quote.levels,
    dummyPdfContent // Pass dummy content
  );
  // --- END MODIFIED ---

  let prestationData: QuotePDFData['prestation'] | undefined = undefined;
  let lineItemsData: QuotePDFData['lineItems'] | undefined = undefined;

  if (quote.businessType === 'SERVICE') {
    // --- MODIFIED: Directly map custom fields ---
    prestationData = {
      customPersonnelMobilise: quote.customPersonnelMobilise,
      customEquipementsProduits: quote.customEquipementsProduits,
      customPrestationsIncluses: quote.customPrestationsIncluses,
      customDelaiPrevu: quote.customDelaiPrevu,
    };
    // Removed all logic involving serviceConfig, teamSize, material mapping, product filtering
    // --- END MODIFIED ---
  } else if (quote.lineItems && Array.isArray(quote.lineItems)) {
    // Product line items mapping (kept as is)
    lineItemsData = quote.lineItems.map((item: any) => ({
      description: item.designation || item.description || 'Produit', // Added designation fallback
      quantity: item.quantity || 1,
      unitPrice: Number(item.unitPrice) || 0,
      totalPrice: Number(item.totalPrice) || 0,
      unit: item.unit
    }));
  }

  // Pricing calculation (kept as is)
  const subTotalHT = Number(quote.subTotalHT) || Number(quote.finalPrice) || 0; // Added fallback 0
  const vatAmount = Number(quote.vatAmount) || (subTotalHT * 0.20);
  const totalTTC = docType === 'FACTURE' ? (subTotalHT + vatAmount) : subTotalHT; // Use subTotalHT for DEVIS total

  // --- MODIFIED: Simplified Payment Conditions (Removed pdfContent dependency) ---
  const depositPercentage = 30;
  const depositAmount = (subTotalHT * depositPercentage) / 100;
  let paymentTitle = 'CONDITIONS DE PAIEMENT';
  let paymentConditions: string[];

  if (docType === 'FACTURE') {
    paymentTitle = 'MODALITÉS DE PAIEMENT';
    paymentConditions = [ // Default Facture conditions
      "Paiement à réception de la facture.",
      "Aucun escompte pour paiement anticipé.",
      "Pénalités de retard : 3 fois le taux d'intérêt légal.",
    ];
  } else { // DEVIS
    paymentTitle = 'CONDITIONS DE PAIEMENT';
    let depositText = `Un acompte de ${depositPercentage}% du montant total HT, soit la somme de ${formatCurrency(depositAmount)} MAD, exigible à la signature/commande.`;
    let balanceText = quote.businessType === 'SERVICE'
      ? `Le solde (${100 - depositPercentage}%) payable à la fin des prestations.`
      : `Le solde (${100 - depositPercentage}%) payable avant la livraison.`;

    paymentConditions = [
      depositText,
      balanceText,
      "Validité de l'offre : 30 jours.",
      "Mode de paiement : Virement bancaire, Chèque ou Espèces.",
    ];
    if (isB2B) {
      // Add B2B specific condition if needed
      // paymentConditions.push("Condition spécifique B2B...");
    }
  }
  // --- END MODIFIED ---

  const result: QuotePDFData = {
    docType,
    number: quote.quoteNumber.replace(/^(Q-|DEV-|DV-|F-|FAC-)/, ''), // Kept as is
    date: today, // Kept as is
    purchaseOrderNumber: quote.purchaseOrderNumber, // Kept as is
    orderedBy: quote.orderedBy, // Kept as is
    company: { // Kept as is
      name: 'Enarva sarl au',
      address: [
        '53, 2ème étage, Appartement 15,',
        'Av. Brahim Roudani',
        'Océan, Rabat - Maroc'
      ],
      ice: '003620340000048',
      if: '66157207',
      rc: '182523',
      rib: '0508 1002 5011 4358 9520 0174'
    },
    recipient: { // Kept as is
      isB2B,
      attention: recipientAttention,
      addressLines: recipientAddressLines
    },
    project: { // Kept as is (objet uses new generation method)
      serviceType: quote.serviceType,
      businessType: quote.businessType,
      propertyType: quote.propertyType,
      surface: quote.surface,
      levels: quote.levels,
      objet: objectTitle
    },
    lineItems: lineItemsData, // Kept as is
    prestation: prestationData, // Uses new custom data structure
    pricing: { // Kept as is
      subTotalHT,
      vatAmount,
      totalTTC, // Corrected to use calculated totalTTC for FACTURE
      amountInWords: numberToFrenchWords(docType === 'FACTURE' ? totalTTC : subTotalHT) // Corrected logic
    },
    payment: { // Uses new simplified conditions
      title: paymentTitle,
      conditions: paymentConditions
    }
  };

  return result;
}

export default generateQuotePDF; // Keep default export